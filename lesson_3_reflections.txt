When would you want to use a remote repository rather than keeping all your work
local?

  I would want a remote repository mainly in two situations. Either I want to
  work from different places or computers and need to have access to my files,
  or there are different people collaborating in the project, so by having a
  remote repository they can also work on the same project.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

	I might want to stay on my local branch commits, instead of incorporating
	other commits to my work, which would happen if there  would be an automatic
	pull.

Describe the differences between forks, clones, and branches. When would you use
one instead of another?

	Fork allow to copy someone else's Guthub repository in oneself Github
	repository, and will be used when we want to reuse someone else's files as a
	foundation for a new project. Clone allow to make a local copy of a Github
	repository, and will be used when we will collaborate on that project as a
	contributor. Branches allows to produce either locally or remotely,
	different lines of code, allowing to evolve them independently, as well as
	merging one or several of them when convenient, both manually and
	automatically.
	
What is the benefit of having a copy of the last known state of the remote stored locally?

	It allows to work offline based on the latest status available. Once commits
	are added locally, and you are back online, you can get an updated copy of the remote
	and merge changes and resolve conflicts if arisen.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	It would be quite hard to keep track on other changes vs. my changes, specially
	with different branches. Some kind of tracking spreadsheet or so had to be used 
	in order to try to keep some tracking an control.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	
	Having a branch allow to keep a master branch with the official code line, and 
	being able to experiment or try features not stable enough yet in the branch.


